import numpy as np
from logger_config import logger
from pprint import pformat

# üì¶ –ò–º–ø–æ—Ä—Ç –º–æ–¥–µ–ª–∏ –¥–µ–≥—Ä–∞–¥–∞—Ü–∏–∏ –∏ –ø—Ä–æ—Ü–µ–¥—É—Ä—ã –ø–æ–¥–±–æ—Ä–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
from scripts.math_model import (
    fit_degradation_model,         # –ú–ù–ö-–ø–æ–¥–±–æ—Ä –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ A, B, C, D
    degradation_model              # –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ –¥–µ–≥—Ä–∞–¥–∞—Ü–∏–∏ –ø–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º
)

# üìà –ò–º–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–π –∞–Ω–∞–ª–∏–∑–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ä—è–¥–æ–≤
from scripts.holt_arima import (
    interpolate_time_series,
    find_best_arima,
    forecast_arima,
    forecast_holt,
)

# üìä –ò–º–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
from utils.plotters import plot_degradation

# üìä –ò–º–ø–æ—Ä—Ç –º–µ—Ç—Ä–∏–∫
from utils.metrics import evaluate_models



# üß™ –í—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: –∏–∑–º–µ—Ä–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–µ–≥—Ä–∞–¥–∞—Ü–∏–∏
#D = np.array([10, 8, 6, 2.5, 2, 1.9])
#N = np.array([0, 3, 5, 10, 15, 24])
N = np.array([0, 3, 5, 10, 24])
D = np.array([23.91666667, 17.83333333, 8.21666667, 8.15, 7.83333333])

# üß™ –ò–∑–º–µ—Ä–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–µ–≥—Ä–∞–¥–∞—Ü–∏–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–≥–Ω–æ–∑–∞
#D_additional = np.array([1.87, 1.83])
#N_additional = np.array([35, 60])
D_additional = np.array([7.79, 7.61])
N_additional = np.array([35, 60])
D_additional_norm = D_additional / np.max(D)

forecast_cycles_count = int(60 - np.max(N))


# ‚öôÔ∏è –ü–æ–¥–±–æ—Ä –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –º–æ–¥–µ–ª–∏
logger.info("‚ñ∂ –ù–∞—á–∏–Ω–∞–µ—Ç—Å—è –ø–æ–¥–±–æ—Ä –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ú–ö–≠")
(A_est, B_est, C_est, D_est), D_norm = fit_degradation_model(
    N=N,
    y=D,
    A=False
)
logger.success(f"‚úÖ –ü–æ–¥–±–æ—Ä –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ú–ö–≠ –∑–∞–≤–µ—Ä—à–µ–Ω. A={A_est}, B={B_est}, C={C_est}, D={D_est}")

#A_est, B_est, C_est, D_est = 1.0, 0.657, 0.574, 0.0087


logger.info("‚ñ∂ –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –ø—Ä–æ–≥–Ω–æ–∑–∞ ARIMA...")
# üìà –ò–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏—è –∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ä—è–¥–∞
interp_series, time_uniform, df_interp = interpolate_time_series(N.tolist(), D_norm.tolist(), freq=1)

# üìà –ü—Ä–æ–≥–Ω–æ–∑ —Å –ø–æ–º–æ—â—å—é ARIMA
arima_model, pdq, aic = find_best_arima(interp_series, p_range=range(5), d_range=range(3), q_range=range(5))

if arima_model:
    arima_forecast, arima_conf_int = forecast_arima(arima_model, steps=20)
    logger.success(f"‚úÖ –ü—Ä–æ–≥–Ω–æ–∑ ARIMA —É—Å–ø–µ—à–Ω–æ –ø–æ—Å—Ç—Ä–æ–µ–Ω.")
else:
    logger.warning("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–æ–±—Ä–∞—Ç—å –º–æ–¥–µ–ª—å ARIMA.")

arima_forecast, arima_conf_int = forecast_arima(arima_model, steps=forecast_cycles_count)

logger.info("‚ñ∂ –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –ø—Ä–æ–≥–Ω–æ–∑–∞ –•–æ–ª—å—Ç–∞...")
# üìâ –ü—Ä–æ–≥–Ω–æ–∑ —Å –ø–æ–º–æ—â—å—é –º–µ—Ç–æ–¥–∞ –•–æ–ª—å—Ç–∞
holt_forecast, holt_lower, holt_upper = forecast_holt(interp_series, steps=forecast_cycles_count)
logger.success("‚úÖ –ü—Ä–æ–≥–Ω–æ–∑ –•–æ–ª—å—Ç–∞ —É—Å–ø–µ—à–Ω–æ –ø–æ—Å—Ç—Ä–æ–µ–Ω.")


last_n = N[-1]
forecast_n = np.arange(last_n + 1, last_n + 1 + forecast_cycles_count)
last_value = interp_series.iloc[-1]


# –ü–æ—Å–ª–µ–¥–Ω–∏–π —Ü–∏–∫–ª –∏–∑ –∏—Å—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
last_n = N[-1]
indices = (N_additional - (last_n + 1)).astype(int)

# –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ª–æ–≤–∞—Ä—å —Å –ø—Ä–æ–≥–Ω–æ–∑–∞–º–∏
predictions = {
    'LSM':   (N_additional, degradation_model(N_additional, A=A_est, B=B_est, C=C_est, D=D_est)),
    'ARIMA': (N_additional, arima_forecast[indices]),
    'HOLT':  (N_additional, holt_forecast[indices]),
}

metrics = evaluate_models(predictions, D_additional_norm)

logger.info("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö:\n{}", pformat(metrics, width=80, compact=True))

plot_degradation(
    parameters_dict={
        'test_data': {
            'N': N,
            'D': D_norm,
        },
        'additional_test_data': {
            'N': N_additional.tolist(),
            'D': D_additional_norm.tolist(),
        },
        'LSM': {
            'N': np.linspace(0, last_n + forecast_cycles_count, 100),
            'D': degradation_model(np.linspace(0, last_n + forecast_cycles_count, 100), A=A_est, B=B_est, C=C_est, D=D_est),
        },
        'ARIMA': {
            'N': forecast_n.tolist(),
            'D': arima_forecast.tolist(),
        },
        'HOLT': {
            'N': forecast_n.tolist(),
            'D': holt_forecast.tolist(),
        },
    },
    title='–î–µ–≥—Ä–∞–¥–∞—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ E50',
    ylabel='E50',
    metrics=metrics,
    save_path=r'results/'
)
